import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp
from scipy.optimize import least_squares
import matplotlib as mpl

if __name__ == '__main__':
    ######################
    # DATA and supposition
    ######################

    beta = .5
    alpha = (1. / 3.) * (1. / 5.2)  # 5.2 is the mean incubation latency
    gamma = (0.1)*(1. / 18.)  # 2.5 is the supposed time for contagion
    epsilon = (1. / 1.) * (1. / 17.)
    delta = (0.9) * (1.)
    kappa = (2. / 3.) * (1. / 5.2)  # 5.2 is the mean incubation latency
    # Total Belgian population
    N = 10000000.
    # days since first infection
    x_data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])
    # infection cases SPF
    y_data = np.array(
        [0, 1, 6, 5, 10, 27, 59, 60, 31, 39, 28, 47, 85, 160, 133, 197, 172, 185, 243, 309, 426, 558, 586, 342])
    y_cumulated_data = np.cumsum(y_data)
    # This unknown parameter does a lot....
    initial_exposed = 40.
    # Curve fit from index to index (range on which the residual is computed)
    from_index = 0
    until_index = 23
    end_phase1 = 8
    end_phase2 = 24
    end_phase3 = 24
    init_values = [N, initial_exposed, 1., 1., 0., 0.]


    def beta_per_phase(t, b1, b2, b3, b4, slope_time):
        if t <= end_phase1:
            return b1
        elif t <= end_phase1 + 1:
            return (b2 - b1) * - ((end_phase1 + slope_time - t) / slope_time) + b2
        elif t <= end_phase2:
            return b2
        elif t <= end_phase2 + 1:
            return (b3 - b2) * - ((end_phase2 + slope_time - t) / slope_time) + b3
        elif t <= end_phase3:
            return b3
        elif t <= end_phase3 + 1:
            return (b4 - b3) * - ((end_phase3 + slope_time - t) / slope_time) + b4
        else:
            return b4


    def SEIQR(t, y, parameters, betas_times, betas_values):
        """
        :param t: time range
        :param y: initial conditions
        :param parameters: parameters
        :param betas_times:
        :param betas_values:
        :return:
        """
        a, b1, b2, b3, b4, g, d, e, k = parameters
        a = alpha  # do not optimize sigma or comment to optimize
        g = gamma  # do not optimize gamma or comment to optimize
        e = epsilon  # do not optimize
        d = delta  # do not optimize
        k = kappa  # do not optimize
        b = beta_per_phase(t, b1, b2, b3, b4, 1.)
        betas_times.append(t)
        betas_values.append(b)
        # initial conditions
        S = y[0]
        E = y[1]
        I = y[2]
        I_total = y[3]  # Infected cumulative, not diminished with recovered and death --> match with SPF cases
        Q = y[4]
        R = y[5]
        return [
            -b * S * (E + I) / float(N),
            b * S * (E + I) / float(N) - a * E - k * E,
            a * E - (g + d) * I,
            a * E,
            d * I - e * Q,
            g * I + e *     Q + k * E
        ]


    def solve_ivp_seiqr_model(init_vals, params, t, times, betas):
        return solve_ivp(SEIQR, [t[0], t[-1]], init_vals, args=(params, times, betas), t_eval=t, max_step=.1)


    # Model limitations
    # Poor quality sampling
    # Model fit has a strong dependency with initial exposed cases which is put as a supposition here

    def residual(params, init):
        solution = solve_ivp(SEIQR, [x_data[0], x_data[-1]], init, args=(params, [], []), t_eval=x_data, max_step=.1)
        v = solution.y[3]
        return (v[from_index:until_index] - y_cumulated_data[from_index:until_index])  # / (v[from_index:until_index])


    res1 = least_squares(residual, [alpha, beta, beta, beta, beta, gamma, delta, epsilon, kappa], args=[init_values],
                         method='lm')
    print("Optimized parameters :", res1.x)

    alpha, beta1, beta2, beta3, beta4, gamma, delta, epsilon, kappa = res1.x

    times = []
    betas = []
    sol_ivp = solve_ivp_seiqr_model(init_values, [alpha, beta1, beta2, beta3, beta4, gamma, delta, epsilon, kappa],
                                    x_data, times,
                                    betas)

    mpl.style.use('seaborn')

    fig = plt.figure(constrained_layout=True)
    gs = fig.add_gridspec(nrows=3, ncols=2)

    ax1 = fig.add_subplot(gs[:2, 0])
    ax1.plot(sol_ivp.t, sol_ivp.y[3], '-', label="Infected cases cumul. simulated")
    ax1.plot(x_data, y_cumulated_data, "k*:", label="SPF")
    plt.grid("True")
    plt.xticks(x_data)
    plt.ylabel("Population")
    plt.xlabel("Days since first infection")
    plt.legend()
    plt.suptitle(
        "SEIR model on SPF data sigma=%.2f, beta1=%.2f, beta2=%.2f, gamma=%.2f, delta=%.2f, epsilon=%.2f, kappa=%.2f" % (
            alpha, beta1, beta2, gamma, delta, epsilon, kappa))

    times = np.array(times)
    index_order = np.argsort(times)
    betas = np.array(betas)

    ax2 = fig.add_subplot(gs[2, 0], sharex=ax1)
    plt.title("Beta values")
    ax2.plot(times[index_order], betas[index_order], '-')
    plt.grid("True")
    plt.ylabel("Value")
    plt.xlabel("Days since first infection")
    plt.ylim(min(betas[index_order]) - .2,
             max(betas[index_order]) + .2)
    plt.yscale("linear")

    ax3 = fig.add_subplot(gs[:2, 1])
    start = 1
    end = 180
    times = []
    betas = []
    sol_ivp2 = solve_ivp_seiqr_model(init_values, [alpha, beta1, beta2, beta3, beta4, gamma, delta, epsilon, kappa],
                                     np.arange(start, end), times,
                                     betas)

    mpl.style.use('seaborn')

    ax3.plot(sol_ivp2.t, sol_ivp2.y[2], '-', label="Infected active simulated")
    # plt.plot(x_data, y_cumulated_data, "k*:", label="SPF")
    plt.grid("True")
    plt.ylabel("Population")
    plt.xlabel("Days since first infection")
    plt.legend()
    plt.show()
